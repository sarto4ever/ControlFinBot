import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)

CONFIG_FILE = 'config.json'

def load_config():
    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

config = load_config()
TOKEN = config["token"]
AUTHORIZED_USERS = config["authorized_users"]

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
ADDING_EXPENSE, ADDING_INCOME, ADDING_BUTTON_LABEL, ADDING_BUTTON_AMOUNT, ADDING_CUSTOM_CURRENCY = range(5)
DATA_FILE = 'data.json'
temp_button = {}

def get_currency():
    data = load_data()
    return data.get("currency", "‚ÇΩ")


# === –†–∞–±–æ—Ç–∞ —Å JSON ===
def load_data():
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑—ã–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç
    current_state = context.user_data.get('state')

    if current_state == "adding_button":
        # –í–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
        await button_handler(update, context)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–æ–≤–µ–º —Å —Ç–µ–º –∂–µ callback_data
        return ConversationHandler.END

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(query, context, is_edit=True)
    return ConversationHandler.END


async def start(source, context: ContextTypes.DEFAULT_TYPE, is_edit=False):
    if hasattr(source, 'from_user'):
        user = source.from_user
        chat_id = source.message.chat_id if hasattr(source, 'message') else source.message.chat.id
    else:
        user = source.effective_user
        chat_id = source.effective_chat.id

    if user.id not in AUTHORIZED_USERS:
        await context.bot.send_message(chat_id=chat_id, text="‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = load_data()
    buttons = data.get("expense_buttons", [])
    quick_buttons = [
        InlineKeyboardButton(f"{item['label']} ({item['amount']}{get_currency()})", callback_data=f"quick_expense:{item['amount']}")
        for item in buttons
    ]
    rows = [quick_buttons[i:i + 2] for i in range(0, len(quick_buttons), 2)]

    keyboard = [
        [InlineKeyboardButton("‚ûï –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='add_expense')],
        *rows,
        [InlineKeyboardButton("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏", callback_data='add_income')],
        [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data='view_balance')],
        [InlineKeyboardButton("üïò –ò—Å—Ç–æ—Ä–∏—è", callback_data='history')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data='manage_buttons')],
        [InlineKeyboardButton("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='admin_menu')]
    ]

    # –ì–ª–∞–≤–Ω–æ–µ: –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–æ–∂–Ω–æ
    if hasattr(source, 'edit_message_text'):
        await source.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    if user.id not in AUTHORIZED_USERS:
        await query.edit_message_text("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    match query.data:
        case 'add_expense':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç—ã:", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]))
            return ADDING_EXPENSE

        case 'add_income':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]))
            return ADDING_INCOME

        case 'view_balance':
            balance = load_data()['balance']
            await query.edit_message_text(f"üìä –ë–∞–ª–∞–Ω—Å: {balance}{get_currency()}", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]))
            return ConversationHandler.END

        case data if data.startswith("quick_expense:"):
            amount = float(data.split(":")[1])
            db = load_data()
            db['balance'] -= amount
            db['transactions'].append({
                "type": "expense",
                "amount": amount,
                "user_id": user.id,
                "user_name": user.first_name,
                "timestamp": datetime.now().isoformat()
            })
            save_data(db)
            await query.edit_message_text(f"‚úÖ –¢—Ä–∞—Ç–∞ {amount}{get_currency()} –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å: {db['balance']}{get_currency()}", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]))
            return ConversationHandler.END

        case 'history':
            keyboard = [
                [InlineKeyboardButton("5", callback_data="history_limit:5"),
                 InlineKeyboardButton("10", callback_data="history_limit:10"),
                 InlineKeyboardButton("20", callback_data="history_limit:20"),
                 InlineKeyboardButton("50", callback_data="history_limit:50")],
                [InlineKeyboardButton("üìÑ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="all_transactions")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]
            await query.edit_message_text("–°–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
            return ConversationHandler.END

        case data if data.startswith("history_limit:"):
            limit = int(data.split(":")[1])
            context.user_data['history_limit'] = limit
            context.user_data['history_page'] = 0
            return await show_history_page(query, context)

        case 'history_next':
            context.user_data['history_page'] += 1
            return await show_history_page(query, context)

        case 'history_prev':
            context.user_data['history_page'] -= 1
            return await show_history_page(query, context)

        case 'manage_buttons':
            db = load_data()
            keyboard = [
                [InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å: {b['label']}", callback_data=f"delete_button:{i}")]
                for i, b in enumerate(db.get("expense_buttons", []))
            ]
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add_button')])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
            await query.edit_message_text("‚öôÔ∏è –ö–Ω–æ–ø–∫–∏ —Ç—Ä–∞—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
            return ConversationHandler.END

        case data if data.startswith("delete_button:"):
            index = int(data.split(":")[1])
            db = load_data()
            if 0 <= index < len(db["expense_buttons"]):
                removed = db["expense_buttons"].pop(index)
                save_data(db)
                await query.edit_message_text(f"–£–¥–∞–ª–µ–Ω–æ: {removed['label']}", reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='manage_buttons')]
                ]))
            return ConversationHandler.END

        case 'add_button':
            context.user_data['state'] = 'adding_button'
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]))
            return ADDING_BUTTON_LABEL


        case 'admin_menu':
            keyboard = [
                [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history_confirm")],
                [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="reset_balance_confirm")],
                [InlineKeyboardButton("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="change_currency")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]
            await query.edit_message_text("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
            return ConversationHandler.END

        case 'clear_history_confirm':
            db = load_data()
            db["transactions"] = []
            save_data(db)
            await query.edit_message_text("üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]))
            return ConversationHandler.END

        case 'reset_balance_confirm':
            db = load_data()
            db["balance"] = 0
            save_data(db)
            await query.edit_message_text(f"üîÑ –ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω –¥–æ 0{get_currency()}.", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
            ]))
            return ConversationHandler.END

        case 'back':
            await start(query, context, is_edit=True)
            return ConversationHandler.END

        case 'all_transactions':
            data = load_data()
            transactions = data.get("transactions", [])

            if not transactions:
                await query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                ]))
                return ConversationHandler.END

            lines = []
            for tx in reversed(transactions):
                dt = datetime.fromisoformat(tx["timestamp"]).strftime("%d.%m %H:%M")
                icon = "‚ûï" if tx["type"] == "income" else "‚ûñ"
                name = tx.get("user_name", "‚ùì")
                lines.append(f"{icon} {tx['amount']}{get_currency()} ‚Äî {dt} ({name})")

            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–Ω–æ–≥–æ ‚Äî —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
            chunk_size = 40
            if len(lines) > chunk_size:
                chunks = [lines[i:i+chunk_size] for i in range(0, len(lines), chunk_size)]
                for chunk in chunks:
                    await query.message.reply_text("\n".join(chunk))
                await query.edit_message_text(f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ {len(lines)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.", reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                ]))
            else:
                await query.edit_message_text("üìÑ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n" + "\n".join(lines), reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
                ]))
            return ConversationHandler.END

        case 'change_currency':
            keyboard = [
                [InlineKeyboardButton("‚ÇΩ", callback_data='currency:‚ÇΩ'),
                 InlineKeyboardButton("$", callback_data='currency:$'),
                 InlineKeyboardButton("‚Ç¨", callback_data='currency:‚Ç¨')],
                [InlineKeyboardButton("‚Ç∏", callback_data='currency:‚Ç∏'),
                 InlineKeyboardButton("¬£", callback_data='currency:¬£')],
                [InlineKeyboardButton("‚Ç∫", callback_data='currency:‚Ç∫'),
                 InlineKeyboardButton("‚Ç¶", callback_data='currency:‚Ç¶'),
                 InlineKeyboardButton("K", callback_data='currency:K')],
                [InlineKeyboardButton("‚ûï –°–≤–æ—è", callback_data='currency_custom')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
            ]
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))
            return ConversationHandler.END

        case data if data.startswith('currency:'):
            symbol = data.split(":")[1]
            db = load_data()
            db["currency"] = symbol
            save_data(db)
            await query.edit_message_text(f"‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {symbol}", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
            ]))
            return ConversationHandler.END
        
        case 'currency_custom':
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å–∏–º–≤–æ–ª –∏–ª–∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: USDT, üíé, ¬•):", reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='change_currency')]
            ]))
            return ADDING_CUSTOM_CURRENCY

    return ConversationHandler.END

# === –ò—Å—Ç–æ—Ä–∏—è —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º ===
async def show_history_page(query, context):
    db = load_data()
    txs = db.get("transactions", [])
    limit = context.user_data.get("history_limit", 10)
    page = context.user_data.get("history_page", 0)

    total = len(txs)
    pages = max(1, (total + limit - 1) // limit)
    page = max(0, min(page, pages - 1))
    context.user_data["history_page"] = page

    start, end = page * limit, (page + 1) * limit
    lines = []

    for tx in txs[::-1][start:end]:
        dt = datetime.fromisoformat(tx["timestamp"]).strftime("%d.%m %H:%M")
        name = tx.get("user_name", "‚ùì")
        icon = "‚ûï" if tx["type"] == "income" else "‚ûñ"
        lines.append(f"{icon} {tx['amount']}{get_currency()} ‚Äî {dt} ({name})")

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="history_prev"))
    if end < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="history_next"))

    keyboard = [nav] if nav else []
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])

    await query.edit_message_text(
        f"üïò –ò—Å—Ç–æ—Ä–∏—è (—Å—Ç—Ä. {page+1} –∏–∑ {pages}):\n" + "\n".join(lines),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ConversationHandler.END

# === –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç—Ä–∞—Ç –∏ –¥–æ—Ö–æ–¥–æ–≤ ===
async def handle_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        return ADDING_EXPENSE
    db = load_data()
    db["balance"] -= amount
    db["transactions"].append({
        "type": "expense",
        "amount": amount,
        "user_id": update.effective_user.id,
        "user_name": update.effective_user.first_name,
        "timestamp": datetime.now().isoformat()
    })
    save_data(db)
    await update.message.reply_text(f"‚úÖ –¢—Ä–∞—Ç–∞ {amount}{get_currency()} –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ë–∞–ª–∞–Ω—Å: {db['balance']}{get_currency()}", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]))
    return ConversationHandler.END

async def handle_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        return ADDING_INCOME
    db = load_data()
    db["balance"] += amount
    db["transactions"].append({
        "type": "income",
        "amount": amount,
        "user_id": update.effective_user.id,
        "user_name": update.effective_user.first_name,
        "timestamp": datetime.now().isoformat()
    })
    save_data(db)
    await update.message.reply_text(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount}{get_currency()} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ë–∞–ª–∞–Ω—Å: {db['balance']}{get_currency()}", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]))
    return ConversationHandler.END

async def handle_button_label(update: Update, context: ContextTypes.DEFAULT_TYPE):
    temp_button['label'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]))

    return ADDING_BUTTON_AMOUNT

async def handle_button_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
        return ADDING_BUTTON_AMOUNT
    db = load_data()
    db["expense_buttons"].append({
        "label": temp_button['label'],
        "amount": amount
    })
    save_data(db)
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {temp_button['label']} {amount}{get_currency()}", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]))
    temp_button.clear()
    return ConversationHandler.END

async def handle_custom_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    custom_symbol = update.message.text.strip()
    if len(custom_symbol) > 10:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª. –í–≤–µ–¥–∏—Ç–µ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return ADDING_CUSTOM_CURRENCY

    db = load_data()
    db["currency"] = custom_symbol
    save_data(db)
    await update.message.reply_text(f"‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {custom_symbol}", reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_menu')]
    ]))
    return ConversationHandler.END


# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ADDING_EXPENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_expense)],
            ADDING_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_income)],
            ADDING_BUTTON_LABEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_label),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            ADDING_BUTTON_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button_amount),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
            ADDING_CUSTOM_CURRENCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_currency),
                CallbackQueryHandler(handle_back, pattern="^back$")
            ],
        },
        fallbacks=[
            CallbackQueryHandler(handle_back, pattern="^back$")
        ]
    )


    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == '__main__':
    main()
